name: tests

on:
  push:
    branches: ['*']
  pull_request:
    branches: ['*']

jobs:
  tests:
    strategy:
      matrix:
        python: [3.9]
    runs-on: ubuntu-latest
    env:
      GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      PYTHONPATH: .
    steps:
      - uses: actions/checkout@v2
      # Initialize the hairy-trumpet submodule
      - name: Initialize and update hairy-trumpet submodule
        run: git submodule update --init --recursive hairy-trumpet
      # Set up Python environment
      - name: Set up Python ${{matrix.python}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python}}
      # Install system dependencies (poppler-utils)
      - name: Install system dependencies
        run: sudo apt-get install -y poppler-utils
      
      - name: install metahtml
        run: |
          cd metahtml
          git init
          git remote add origin https://github.com/mikeizbicki/metahtml
          git config core.sparseCheckout true
          echo '/*' > .git/info/sparse-checkout
          echo '!/tests' >> .git/info/sparse-checkout
          git pull origin master
          pip install .
          cd ..

      # Install Python dependencies from requirements.txt
      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: run query tests
        run: |
          python3 ragnews/__init__.py --query "Who is the current democratic presidential nominee?"
          python3 ragnews/__init__.py --query "What is the policy position of Trump related to illegal Mexican immigrants?"

      - name: Run evaluation test
        run: |
        # Run the evaluation script and log the output
        python3 ragnews/evaluate.py --data "hairy-trumpet/data/wiki__page=2024_United_States_elections,recursive_depth=0__dpsize=paragraph,transformations=[canonicalize, group, rmtitles, split]" | tee output.log

        # Extract accuracy from the log output
        accuracy=$(grep 'Accuracy:' output.log | awk '{print $2}')

        # Log the accuracy
        echo "Accuracy: $accuracy"

        # Check if accuracy is valid
        if [[ -z "$accuracy" ]]; then
          echo "Error: Accuracy is empty or invalid"
          exit 1
        fi

        # Compare accuracy to the threshold (0.7) â€” note the lowercase 'accuracy' in the variable name
        if (( $(echo "$accuracy > 0.7" | bc -l) )); then
          echo "Test passed with accuracy $accuracy"
        else
          echo "Test failed with accuracy $accuracy"
          exit 1
        fi
